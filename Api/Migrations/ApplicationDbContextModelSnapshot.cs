// <auto-generated />
using Api.Models.Domain.General;
using Api.Models.System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Api.Models.Domain.AppUser.AppUser", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTimeOffset>("Created");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("TenantId", "Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Api.Models.Domain.General.Attachment", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<double>("FileSize");

                    b.Property<string>("Filename")
                        .IsRequired();

                    b.Property<string>("Hash");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int?>("QualityTestId");

                    b.Property<string>("SearchContent");

                    b.Property<string>("ThumbnailUrl");

                    b.Property<int>("Type");

                    b.Property<string>("Url")
                        .IsRequired();

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("QualityTestId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Api.Models.Domain.General.Skill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int?>("RoutingStepId");

                    b.Property<string>("SearchContent");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoutingStepId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Api.Models.Domain.General.UnitOfMeasure", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.ToTable("UnitOfMeasures");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryItem", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<decimal?>("Height");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal?>("Length");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("Revision")
                        .HasMaxLength(10);

                    b.Property<string>("SearchContent");

                    b.Property<int>("StatusId");

                    b.Property<decimal?>("Weight");

                    b.Property<decimal?>("Width");

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("Id");

                    b.ToTable("InventoryItemStatuses");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryLocation", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int?>("ParentId");

                    b.Property<int?>("ParentId1");

                    b.Property<int?>("ParentTenantId");

                    b.Property<string>("SearchContent");

                    b.Property<int>("StatusId");

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("ParentTenantId", "ParentId1");

                    b.ToTable("InventoryLocations");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryLocationStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("Id");

                    b.ToTable("InventoryLocationStatuses");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryStock", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<int>("InventoryItemId");

                    b.Property<int?>("InventoryItemId1");

                    b.Property<int?>("InventoryItemTenantId");

                    b.Property<int>("InventoryLocationId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("LocationId");

                    b.Property<int?>("LocationTenantId");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<double>("Quantity");

                    b.Property<string>("Revision")
                        .HasMaxLength(10);

                    b.Property<string>("SearchContent");

                    b.Property<int>("StatusId");

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("InventoryItemTenantId", "InventoryItemId1");

                    b.HasIndex("LocationTenantId", "LocationId");

                    b.ToTable("InventoryStock");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryStockStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("Id");

                    b.ToTable("InventoryStockStatus");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.BillOfMaterial", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<int>("ComponentId");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<int?>("InventoryItemId");

                    b.Property<int?>("InventoryItemTenantId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int>("ParentId");

                    b.Property<double>("Quantity");

                    b.Property<string>("SearchContent");

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("InventoryItemTenantId", "InventoryItemId");

                    b.ToTable("BillOfMaterials");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.LoggedWork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("ClockIn");

                    b.Property<DateTimeOffset?>("ClockOut");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.Property<int>("TenantId");

                    b.Property<int>("UserId");

                    b.Property<int?>("UserId1");

                    b.Property<int?>("UserTenantId");

                    b.Property<int?>("WorkOrderId");

                    b.Property<int?>("WorkOrderId1");

                    b.Property<int?>("WorkOrderStepId");

                    b.Property<int?>("WorkOrderTenantId");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderStepId");

                    b.HasIndex("UserTenantId", "UserId1");

                    b.HasIndex("WorkOrderTenantId", "WorkOrderId1");

                    b.ToTable("LoggedWork");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.QualityTest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("ExpectedResult");

                    b.Property<string>("Instructions")
                        .HasMaxLength(1000);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int?>("RoutingStepId");

                    b.Property<string>("SearchContent");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoutingStepId");

                    b.ToTable("QualityTests");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.QualityTestResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsPassed");

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int>("QualityTestId");

                    b.Property<string>("Result");

                    b.Property<string>("SearchContent");

                    b.Property<int?>("WorkOrderStepId");

                    b.HasKey("Id");

                    b.HasIndex("QualityTestId");

                    b.HasIndex("WorkOrderStepId");

                    b.ToTable("QualityTestResults");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.Routing", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<int?>("InventoryItemId");

                    b.Property<int?>("InventoryItemTenantId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("InventoryItemTenantId", "InventoryItemId");

                    b.ToTable("Routings");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.RoutingStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int>("RoutingId");

                    b.Property<int?>("RoutingId1");

                    b.Property<int?>("RoutingTenantId");

                    b.Property<string>("SearchContent");

                    b.HasKey("Id");

                    b.HasIndex("RoutingTenantId", "RoutingId1");

                    b.ToTable("RoutingSteps");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.ScrapReason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.Property<int>("TenantId");

                    b.HasKey("Id");

                    b.ToTable("ScrapReasons");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.WorkOrder", b =>
                {
                    b.Property<int>("TenantId");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BillOfMaterialId");

                    b.Property<int?>("BillOfMaterialId1");

                    b.Property<int?>("BillOfMaterialTenantId");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CustomJsonData");

                    b.Property<DateTimeOffset>("DueDate");

                    b.Property<int>("InventoryItemId");

                    b.Property<int?>("InventoryItemId1");

                    b.Property<int?>("InventoryItemTenantId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<double>("Quantity");

                    b.Property<int>("RoutingId");

                    b.Property<int?>("RoutingId1");

                    b.Property<int?>("RoutingTenantId");

                    b.Property<string>("SearchContent");

                    b.Property<int>("StatusId");

                    b.Property<int>("UnitOfMeasureId");

                    b.Property<int?>("UnitOfMeasureId1");

                    b.Property<int?>("UnitOfMeasureTenantId");

                    b.HasKey("TenantId", "Id");

                    b.HasAlternateKey("Id");

                    b.HasIndex("StatusId");

                    b.HasIndex("BillOfMaterialTenantId", "BillOfMaterialId1");

                    b.HasIndex("InventoryItemTenantId", "InventoryItemId1");

                    b.HasIndex("RoutingTenantId", "RoutingId1");

                    b.HasIndex("UnitOfMeasureTenantId", "UnitOfMeasureId1");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.WorkOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderStatuses");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.WorkOrderStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("ActualCost");

                    b.Property<double>("ActualLaborHours");

                    b.Property<double>("CompletedQuantity");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<decimal>("EstimatedCost");

                    b.Property<double>("EstimatedLaborHours");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<int>("RoutingStepId");

                    b.Property<double>("ScrapQuantity");

                    b.Property<int?>("ScrapReasonId");

                    b.Property<string>("SearchContent");

                    b.Property<int>("StatusId");

                    b.Property<int>("WorkOrderId");

                    b.Property<int?>("WorkOrderId1");

                    b.Property<int?>("WorkOrderTenantId");

                    b.HasKey("Id");

                    b.HasIndex("RoutingStepId");

                    b.HasIndex("ScrapReasonId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkOrderTenantId", "WorkOrderId1");

                    b.ToTable("WorkOrderSteps");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.WorkOrderStepStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderStepStatuses");
                });

            modelBuilder.Entity("Api.Models.Domain.Tenant.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTimeOffset?>("Modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ObfuscatedId");

                    b.Property<string>("SearchContent");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("Api.Models.Domain.AppUser.AppUser", b =>
                {
                    b.HasOne("Api.Models.Domain.Tenant.Tenant", "Tenant")
                        .WithMany("AppUsers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Models.Domain.General.Attachment", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.QualityTest")
                        .WithMany("Attachments")
                        .HasForeignKey("QualityTestId");
                });

            modelBuilder.Entity("Api.Models.Domain.General.Skill", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.RoutingStep")
                        .WithMany("RequiredSkills")
                        .HasForeignKey("RoutingStepId");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryItem", b =>
                {
                    b.HasOne("Api.Models.Domain.Inventory.InventoryItemStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Models.Domain.Tenant.Tenant")
                        .WithMany("InventoryItems")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryLocation", b =>
                {
                    b.HasOne("Api.Models.Domain.Inventory.InventoryLocationStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Models.Domain.Tenant.Tenant")
                        .WithMany("InventoryLocations")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Models.Domain.Inventory.InventoryLocation", "Parent")
                        .WithMany("SubLocations")
                        .HasForeignKey("ParentTenantId", "ParentId1");
                });

            modelBuilder.Entity("Api.Models.Domain.Inventory.InventoryStock", b =>
                {
                    b.HasOne("Api.Models.Domain.Inventory.InventoryStockStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Models.Domain.Tenant.Tenant")
                        .WithMany("InventoryStock")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Models.Domain.Inventory.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemTenantId", "InventoryItemId1");

                    b.HasOne("Api.Models.Domain.Inventory.InventoryLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationTenantId", "LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.BillOfMaterial", b =>
                {
                    b.HasOne("Api.Models.Domain.Inventory.InventoryItem")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("InventoryItemTenantId", "InventoryItemId");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.LoggedWork", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.WorkOrderStep")
                        .WithMany("LoggedWork")
                        .HasForeignKey("WorkOrderStepId");

                    b.HasOne("Api.Models.Domain.AppUser.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserTenantId", "UserId1");

                    b.HasOne("Api.Models.Domain.Manufacturing.WorkOrder", "WorkOrder")
                        .WithMany()
                        .HasForeignKey("WorkOrderTenantId", "WorkOrderId1");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.QualityTest", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.RoutingStep")
                        .WithMany("RequiredQualityTests")
                        .HasForeignKey("RoutingStepId");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.QualityTestResult", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.QualityTest", "QualityTest")
                        .WithMany()
                        .HasForeignKey("QualityTestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Models.Domain.Manufacturing.WorkOrderStep")
                        .WithMany("QualityTestResults")
                        .HasForeignKey("WorkOrderStepId");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.Routing", b =>
                {
                    b.HasOne("Api.Models.Domain.Tenant.Tenant")
                        .WithMany("Routings")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Models.Domain.Inventory.InventoryItem")
                        .WithMany("Routings")
                        .HasForeignKey("InventoryItemTenantId", "InventoryItemId");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.RoutingStep", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.Routing", "Routing")
                        .WithMany("Steps")
                        .HasForeignKey("RoutingTenantId", "RoutingId1");
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.WorkOrder", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.WorkOrderStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Models.Domain.Tenant.Tenant")
                        .WithMany("WorkOrders")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Models.Domain.Manufacturing.BillOfMaterial", "BillOfMaterial")
                        .WithMany()
                        .HasForeignKey("BillOfMaterialTenantId", "BillOfMaterialId1");

                    b.HasOne("Api.Models.Domain.Inventory.InventoryItem", "InventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItemTenantId", "InventoryItemId1");

                    b.HasOne("Api.Models.Domain.Manufacturing.Routing", "Routing")
                        .WithMany()
                        .HasForeignKey("RoutingTenantId", "RoutingId1");

                    b.HasOne("Api.Models.Domain.General.UnitOfMeasure", "UnitOfMeasure")
                        .WithMany()
                        .HasForeignKey("UnitOfMeasureTenantId", "UnitOfMeasureId1")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Api.Models.Domain.Manufacturing.WorkOrderStep", b =>
                {
                    b.HasOne("Api.Models.Domain.Manufacturing.RoutingStep", "RoutingStep")
                        .WithMany()
                        .HasForeignKey("RoutingStepId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Api.Models.Domain.Manufacturing.ScrapReason", "ScrapReason")
                        .WithMany()
                        .HasForeignKey("ScrapReasonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Models.Domain.Manufacturing.WorkOrderStepStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Api.Models.Domain.Manufacturing.WorkOrder", "WorkOrder")
                        .WithMany("Steps")
                        .HasForeignKey("WorkOrderTenantId", "WorkOrderId1");
                });
#pragma warning restore 612, 618
        }
    }
}
